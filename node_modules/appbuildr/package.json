{
  "name": "appbuildr",
  "preferGlobal": true,
  "version": "0.1.12",
  "author": {
    "name": "drdrej"
  },
  "description": "a simple code generation tool for developers",
  "repository": {
    "type": "git",
    "url": "https://github.com/drdrej/app-buildr.git"
  },
  "keywords": [
    "code",
    "transform",
    "generator",
    "build",
    "generate"
  ],
  "main": "index.js",
  "bin": {
    "appbuildr": "./bin/appbuildr.js"
  },
  "dependencies": {
    "mu2": "~0.5.17",
    "pegjs": "~0.7.0",
    "imagemagick": "~0.1.3",
    "JSONSelect": "~0.4.0",
    "xml2js": "~0.2.6",
    "wrench": "~1.4.4",
    "underscore": "~1.4.4"
  },
  "devDependencies": {
    "mu2": "~0.5.17",
    "pegjs": "~0.7.0",
    "imagemagick": "~0.1.3",
    "JSONSelect": "~0.4.0",
    "xml2js": "~0.2.6",
    "wrench": "~1.4.4",
    "underscore": "~1.4.4"
  },
  "analyze": false,
  "license": "MIT",
  "engines": {
    "node": ">=0.8.19"
  },
  "readmeFilename": "README.md",
  "directories": {
    "example": "example",
    "test": "test"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "readme": "appbuildr\r\n==========\r\n-- inspired by model-driven-architecture.\r\n\r\nAuthor: Andreas Siebert, ask@touchableheroes.com\r\n\r\n\r\n\r\n## Attention:\r\nThis software is unstable. please use it carefuly.\r\n\r\n## Description:\r\nA code-generator to build apps. App-Buildr use templates and JavaScript \r\nto build boiler-plate-code for your apps. the concept is based on the idea of\r\nmodel-driven-architecture and templating.\r\n\r\n## Usage\r\n\r\n1. install appbuildr\r\n2. create prototype-project\r\n3. create model\r\n4. create transformers\r\n5. enrich prototype-files with macros\r\n6. generate app-boilerplate-code\r\n\r\n### Where to use appbuildr?\r\n\r\nI use appbuildr to create basic-structure of my android-apps and plan to use it in other projects also.\r\n\r\n### Install\r\n\r\nappbuildr is a nodejs based product. to use it in your dev-environment you need to install nodejs and npm.\r\nafter nodejs is installed use npm to install appbuildr.\r\n\r\n    npm install appbuildr -g\r\n\r\n### Create prototype-project\r\nAppbuildr is a tool to copy and create files from templates based on a specified model.\r\nFist of all, before you start you will need a prototype-project. A prototype-project\r\nis a project with some predefined files for your main-project. \r\n\r\nFor example I use appbuildr to create boilerplate-code in my android-apps. To use it, i've created \r\nan android-prototype-project. In this eclipse-project I do all my \"research-stuff\" for the main-project. \r\nSo, I config my settings, create some java-files and some xmls. And use all this stuff \r\nlater in appbuildr to derive my final application from prototype.\r\n\r\n\r\n### Create model\r\n\r\nModel is a simple json-file. The structure of the model is based on prefered transformers. \r\nA model-file is your way to describe a solution. Here is an example of a model-file:\r\n\r\n```javascript\r\n    {\r\n    \"modelVersion\" : 1,\r\n    \r\n    \"app\" : {\r\n     ...\r\n     \r\n     \"entities\" : [\r\n         { \r\n            \"name\"  : \"MyEntity_1\",\r\n            \"columns\" : [ ... ] \r\n         \r\n         },\r\n         { \r\n            \"name\"  : \"MyEntity_2\",\r\n            \"columns\" : [ ... ]\r\n         \r\n         },\r\n         ...\r\n     ]\r\n    }\r\n    }\r\n```\r\n\r\nModels will be validated and transformed into code by transformers. \r\n\r\n\r\n### Create transformrs\r\n\r\nTransformr is a java-script-object declared in this way:\r\n```javascript\r\nmodule.exports = {\r\n    \r\n    // model-version. is important to validate later against the buildr and transformrs\r\n    modelVersion : 1,\r\n    \r\n    // model-query:\r\n    query : \".entities > *\",\r\n    \r\n    // description, will be used to log:\r\n\tdesc : \"Create entities\",\r\n\r\n    // transformation.function:\r\n\tbind : function(entity, model) {\t\r\n       ...\r\n\t}\r\n};\r\n\r\n```\r\n\r\n\r\nExample of a transformr to create entity-classes:\r\n\r\n```javascript\r\nmodule.exports = {\r\n    modelVersion : 1,\r\n\r\n\tquery : \".entities > *\",\r\n    \r\n\tdesc : \"Create entities\",\r\n\r\n\tbind : function(entity, model) {\t\r\n\t\tvar fileModel = model.vfs;\r\n\t\t\r\n        // create dir-structure:\r\n\t\tvar dir = fileModel.dirs( pckgPath );\r\n\t\tvar fileName = entity.name + \".java\";\r\n\t\t\r\n        // path to template-dir:\r\n\t\tvar path = model.appDefinition.projectTemplate + \"/templates\";\r\n\t\t\r\n        // append template-based file:\r\n\t\tdir.add(\"tmpl\", fileName, \"create java from template.\",\r\n\t\t\t\ttrue, \r\n                {\r\n\t\t\t\t\ttemplatePath : path,\r\n\t\t\t\t\ttemplate : \"PrototypeEntity.java.tmpl\",\r\n\r\n\t\t\t\t\tclassName : entity.name,\r\n                    pckg      : \"com.example.entities\"\r\n\t\t});\r\n\t}\r\n};\r\n\r\n```\r\n\r\nTransformers must be placed in a transformr-dir. Check example-code!\r\n\r\n\r\n\r\n#### How to use templates in appbuildr?\r\n\r\nTeplates are files enriched with [mustache-syntax] (http://mustache.github.com/) \r\nand use a suffix *.tmpl.\r\n\r\n\r\n##### Create a class from template\r\n\r\nFor example in my apps I create database-entities for my android-apps based on a\r\ntemplate Entity.java.tmpl.\r\n\r\nA template might look like this:\r\n\r\n\r\n    package {{params.pckg}};\r\n    \r\n    public class {{params.entity}} extends Entity {\r\n    ...\r\n    }\r\n\r\n\r\nI don't like template-files, because I can't use my favorised IDE to write them. For good-working syntax-highliting \r\nyou have to use an editor with support for both languages: template- and source-language. \r\n\r\nMy common way of building solutions is:\r\n\r\n1. build a prototype\r\n2. build template from prototype\r\n3. build product from template\r\n\r\nI've tried to rebuild this workflow in appbuildr. \r\n\r\nAppbuild supports some text-editing-macros to gives you a way to create \r\ntemplates directly from prototypes. An implemented pre-processor convert\r\nprototype-files in a template. To modify the prototype-file appbuildr use \r\nmacros (described later).\r\n\r\nAn example of a prototype-file written in Java Programming Language filled with macros:  \r\n\r\n```java\r\npackage /* [#word with:{{params.pckg}} #]*/ com.example.prototype;\r\n\r\npublic class /* [#word with:{{params.className}} #] */ PrototypeEntity extends Entity {\r\n...\r\n}\r\n```\r\n\r\nIn this example I've used a word-macro to replace the next word in text \r\nwith a passed mustache-variable.\r\n\r\n\r\n##### Preprocessor-Macros\r\nUse built-in macros to simplify template-creation.\r\n\r\nPredefined macros:\r\n\r\n1. word - replace next word with a passed string or mustache-variable.\r\n2. uncomment - uncomment the next commented line. \r\nWARNING: supports only java-single-comment '//' at this moment\r\n\r\n\r\n### API/JavaScript\r\n\r\nYou can use appbuildr programmaticaly:\r\n\r\n```javascript\r\n\r\n// load appbuildr:\r\nvar Buildr = require( \"apbuildr\" ); \r\n\r\n// init appbuildr\r\nvar buildr = new Buildr(\"path/to/my/output/dir\", \r\n\t\t\"path/to/my/prototype\" );\r\n\r\n// to delete the complete project use: \r\n// buildr.deleteProject();\r\n\r\n// clean up only some dirs and files \r\n// to rebuild the most important stuff:\r\nbuildr.cleanup();\r\n\r\n// -- call transformation \"create-db-entities\"\r\nbuildr.use( \"create-db-entities\" );\r\n\r\n// generate the project:\r\nbuildr.generate();\r\n\r\nbuildr.close();\r\n```\r\n\r\n### Libraries and third-party-products\r\n\r\nTo create this project I have used different open-source-projects:\r\n\r\n1. [JSONSelect] (http://jsonselect.org/#overview) - to select elements in the model.\r\n2. [mu2] (https://github.com/raycmorgan/Mu) - to interpret mustache-syntax in my templates.\r\n3. [wrench] (https://github.com/ryanmcgrath/wrench-js) - to work with directories.\r\n4. [mocha] (http://visionmedia.github.com/mocha/) - to test\r\n5. [pegjs] (http://pegjs.majda.cz/) - to implement the preprocessor-macro-parser.\r\n\r\n\r\n##Links: \r\n\r\n\r\n\r\n\r\n\r\n##License: \r\nMIT License (MIT).\r\nFor more information please check LICENSE.md file.\r\n",
  "_id": "appbuildr@0.1.12",
  "_from": "appbuildr@*"
}
